package s2c_user;
syntax = "proto3";

import "./share_structure.proto";

// server error
message server_error {
    required int32 res = 1; // error code see {ServerErrorCode}
}

// login res
message login_res {
    required int32 res = 1;  // error code see {ServerErrorCode}
    optional bool isNew = 2; // =ture need create_player, else enter_game
    optional share.user_data data = 3; // user data
}

// create player
message create_player_res {
    required int32 res = 1; // error code see {ServerErrorCode}
    optional player_sinfo sinfo = 2; // simple info of player
}

// enter game
message enter_game_res {
    required int32 res = 1; // error code see {ServerErrorCode}
    optional share.player_data data = 2; // full player data of self
    optional share.port_data portdata = 3; // full port data of current port
}

// player in map zone info
message playerinzoneinfo {
    required uint32 instid = 1; // map instance id (player/monster/other obj...)
    required uint32 playerid = 2; // player id
    required uint32 ver = 3;  // avatar version, +1 each time avatar/showinfo is changed
    required share.pos2d pos = 4; // position
    optional share.player_mov_info goto = 5; // current moving info
}

// player enter map zone
message player_enterzone {
    repeated playerinzoneinfo infos = 1; // in zone player info
}
// player leave map zone
message player_leavezone {
    repeated uint32 instids = 1; // leave zone player instance ids
}

// move
message player_goto {
    required uint32 instid = 1; // map instance id (player/monster/other obj...)
    required share.player_mov_info goto = 2; // goto move info
}
// stop move
message player_stop {
    required uint32 instid = 1; // map instance id (player/monster/other obj...)
    required share.pos2d pos = 2; // stop position
}
// send when clinet pos not same with server pos in range
message player_pos_correct {
    required share.pos2d pos = 1; // current self position
}

// change map
message changemap_res {
    required uint32 tomapid = 1; // target map id
    required uint32 selfInstid = 2; // new map instance id, bind it with player
    required share.pos2d pos = 3; // position
}

// player simple info with version
message player_sinfo_with_ver {
    required uint32 ver = 1; // avatar version, +1 each time avatar/showinfo is changed
    required share.player_sinfo sinfo = 2; // player simple info
}

// get player simple info result
// cahce it in client
message get_player_sinfo_res {
    repeated player_sinfo_with_ver versinfos = 1; // player simple info with version
}

// get player info result
message get_player_info_res {
    repeated share.player_info infos = 1; // player info
}

// get palyer hero info (self or others)
message get_hero_info_res {
    required uint32 playerid = 1; // to get info player id
    repeated hero_data heros = 2; // player heros
}

// get palyer pet info (self or others)
message get_pet_info_res {
    required uint32 playerid = 1; // to get info player id
    repeated pet_data pets = 2; // player pets
}

// get palyer pet info (self or others)
message get_ship_info_res {
    required uint32 playerid = 1; // to get info player id
    repeated ship_data ships = 2; // player ships
}

// player changed avatar info
message player_change_ava_res {
    required uint32 playerid = 1; // change avatar player id
    required uint32 heroava = 2; // avatar info, use hero job as hero avatar see {sc:HeroNFT}
    required uint32 ver = 3; // avatar version, +1 each time avatar/showinfo is changed
}

// player change pet avatar info
message player_change_pet_res {
    required uint32 playerid = 1; // change avatar player id
    required pet_showinfo petava = 2; // pet avatar info, use petid and slots as pet avatar see {sc:HeroNFT}
    required uint32 ver = 3; // avatar version, +1 each time avatar/showinfo is changed
}

// chat msg
message chat_msg {
    required uint32 channel = 1; // chat channel, 1=wolrd, 2=current map, 3=near by
    required string msg = 2; // chat msg
}
// borad cast msg
message borad_cast_msg {
    required uint32 type = 1; // broad cast type
    required string msg = 2; // broad cast msg
}
// ----------------------------------------------------------------------------

// storehouse changed
message storhouse_change {
    repeated share.item_data iteminfo = 1; // change info, add or sub numbers in iteminfo array
    optional uint32 maxrepoload = 2; // max load space changed
    optional uint32 curload = 3; // current load space changed
    optional uint32 level = 4; // level changed
}

// get port data res
message get_portdata_res {
    required share.port_data data = 1; // port data
}

// ----------------------------------------------------------------------------

// get mine point info res
message get_mineinfo_res {
    required int32 res = 1; // error code see {ServerErrorCode}
    repeated share.mine_info info = 2; // see {share.mine_info}
}

// start manul mine res
message start_manulmine_res {
    required int32 res = 1; // error code see {ServerErrorCode}
    required uint32 mineid = 2;
}
// stop manul mine res
message stop_manulmine_res {
    required int32 res = 1; // error code see {ServerErrorCode}
}
// performe a manul mine output res
message manulmine_res {
    required share.item_data outputitem = 1; // output commodity item info
}
// fetch current manulmine res
// will trigger a {storhouse_change} msg if success
message fetch_manulmine_output_res {
    required int32 res = 1; // error code see {ServerErrorCode}
}

// start hero mine res
message start_heromine_res {
    required int32 res = 1; // error code see {ServerErrorCode}
    optional string heronftid = 2; // hero nft id, see in {sc:HeroNFT}
    optional uint32 mineid = 3;
}
// stop hero mine res
message stop_heromine_res {
    required int32 res = 1; // error code see {ServerErrorCode}
    required string heronftid = 2; // hero nft id, see in {sc:HeroNFT}
}
// get hero mine infos res
message get_heromine_infos_res {
    required int32 res = 1; // error code see {ServerErrorCode}
    required shared.hero_minning_data info = 2; // see in {shared.hero_minning_data}
    required uint32 unfetchedoutput = 3; // unfetched mine output count
}
// fetch heromine output res
// will trigger a {storhouse_change} msg if success
message fetch_heromine_output_res {
    required int32 res = 1; // error code see {ServerErrorCode}
    required string heronftid = 2; // hero nft id, see in {sc:HeroNFT}
}

// ----------------------------------------------------------------------------

// factory make product res
// if success, trigger {storhouse_change} msg
message make_factory_product_res {
    required uint32 res = 1; // error code see {ServerErrorCode}
    optional uint32 lineidx = 2; // line index
    optional share.factory_line_data linedata = 3; // line data see {share.factory_line_data}
}

// set factory hero res
message set_factory_hero_res {
    required uint32 res = 1; // error code see {ServerErrorCode}
    optional string nftid = 2; // hero or pet nft id, see in {sc:HeroNFT}
    optional uint32 lineidx = 3; // line index
    optional uint32 singleprodtmms = 4; // single product cost time, in millisecond
}

// unset factory hero res
message unset_factory_hero_res {
    required uint32 res = 1; // error code see {ServerErrorCode}
    optional string nftid = 2; // hero or pet nft id, see in {sc:HeroNFT}
    optional uint32 lineidx = 3; // line index
    optional uint32 singleprodtmms = 4; // single product cost time, in millisecond
}

// fetch factory output product res
// if success, trigger {storhouse_change} msg
message fetch_factory_product_res {
    required uint32 res = 1; // error code see {ServerErrorCode}
    optional uint32 lineidx = 2; // line index
    optional uint32 unfetchedcount = 3; // unfetched output count
}

// factory line data change
message factory_line_change {
    required uint32 portid = 1; // port id
    required uint32 lineidx = 2; // line index
    optional uint32 unfetchedcount = 3; // unfetched output count
    optional uint32 outputcount = 4; // output product count
    optional uint32 lastoutputtms = 5; // last output timestamp in second
    optional uint32 singleprodtmms = 6; // single product cost time, in millisecond
    optional string heronftid = 7;  // hero nft id
    optional string petnftid = 8;  // pet hero nft id (pet & hero use same nft contract)
}

// ----------------------------------------------------------------------------

// put on sale res 
message shop_put_onsale_res {
    required uint32 res = 1; // error code see {ServerErrorCode}
    required uint32 proditemid = 2;  // product item id, see in item config
    required uint32 count = 3; // item count
}

// fetch shop gold res
message shop_fetch_gold_res {
    required uint32 res = 1; // error code see {ServerErrorCode}
    required string txhash = 2; // mint gold transaction hash, see in contract
}